//Инкапсуляция - сокрытие реализации
// метод = это функция для экземпляра класса
//прегрузка метода = методы с одинаковым названием, но с разным колличеством или типом аргументов
//атрибут = переменная, описание которой создает программист при создании класса
//Dependency injection - зависимость класса от экземпляров другого класса
//Чтобы класс нельзя было перезаписать пишут final
// абстрактный класс — это максимально абстрактная, очень приблизительная «заготовка» для группы будущих классов.
 Эту заготовку нельзя использовать в готовом виде — слишком «сырая». Но она описывает некое общее состояние и поведение,
 которым будут обладать будущие классы — наследники абстрактного класса.
 //У нас даже не получится создать внутри интерфейса private-переменные. Почему? Потому что private-модификатор создали,
  чтобы скрывать реализацию от пользователя. А внутри интерфейса реализации нет: там и скрывать нечего.

   Интерфейс только описывает поведение. Соответственно, мы не сможем реализовать внутри интерфейса геттеры и сеттеры.
   Такова природа интерфейса: он нужен для работы с поведением, а не состоянием.

   В Java8 появились дефолтные методы интерфейсов, у которых есть реализация.
   Абстрактный класс связывает между собой и объединяет классы, имеющие очень близкую связь.
   В то же время, один и тот же интерфейс могут реализовать классы, у которых вообще нет ничего общего.

   Классы могут реализовывать сколько угодно интерфейсов, но наследоваться можно только от одного класса.
// функциональным методом может считаться тот интерфейс у которого есть только 1 абстрактный метод
//extends используется, когда есть четкое отношение «является» между классами. Например, «Собака» является «Животным»,
 поэтому класс Dog может расширить класс Animal . implements используется, когда класс должен предоставить определенное поведение, описанное в интерфейсе.
// native класс или ещё что - написан на другом языке
// Метод equals Сравнение двух объектов. По умолчанию сравнение просиходит по ссылке
// провалиться ctrl + B
// enome нкжен чтобы хранить не изменяющиеся значения,справочная игформация, получаем сразу к ним доступ и видим их описания
// из стринга в инт int number = Integer.parseInt(text);
//Вложенный статический класс может существовать и в не класса ( паспорт человека), а вложенный не статический не может ( сердце чел)
// класс record нужен для того, чтобы хранить даннеы и их не менять
// для ошибок try {}
catch (Exception e){}